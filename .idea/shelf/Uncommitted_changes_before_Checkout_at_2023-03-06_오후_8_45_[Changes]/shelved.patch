Index: src/test/java/com/gdsc/beeye/BeeyeApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/gdsc/beeye/BeeyeApplicationTests.java b/src/test/java/com/gdsc/beeye/BeeyeApplicationTests.java
new file mode 100644
--- /dev/null	(date 1676367530000)
+++ b/src/test/java/com/gdsc/beeye/BeeyeApplicationTests.java	(date 1676367530000)
@@ -0,0 +1,13 @@
+package com.gdsc.beeye;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class BeeyeApplicationTests {
+
+	@Test
+	void contextLoads() {
+	}
+
+}
Index: src/main/java/com/gdsc/beeye/gcs/DownloadReqDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/gdsc/beeye/gcs/DownloadReqDto.java b/src/main/java/com/gdsc/beeye/gcs/DownloadReqDto.java
new file mode 100644
--- /dev/null	(date 1676888985025)
+++ b/src/main/java/com/gdsc/beeye/gcs/DownloadReqDto.java	(date 1676888985025)
@@ -0,0 +1,13 @@
+/*
+package com.gdsc.beeye.gcs;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+
+@AllArgsConstructor
+@Getter
+public class DownloadReqDto {
+    private String bucketName;
+    private String downloadFileName;
+    private String localFileLocation;
+}*/
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew b/gradlew
new file mode 100644
--- /dev/null	(date 1676367530000)
+++ b/gradlew	(date 1676367530000)
@@ -0,0 +1,240 @@
+#!/bin/sh
+
+#
+# Copyright © 2015-2021 the original authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+#
+#   Gradle start up script for POSIX generated by Gradle.
+#
+#   Important for running:
+#
+#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
+#       noncompliant, but you have some other compliant shell such as ksh or
+#       bash, then to run this script, type that shell name before the whole
+#       command line, like:
+#
+#           ksh Gradle
+#
+#       Busybox and similar reduced shells will NOT work, because this script
+#       requires all of these POSIX shell features:
+#         * functions;
+#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
+#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
+#         * compound commands having a testable exit status, especially «case»;
+#         * various built-in commands including «command», «set», and «ulimit».
+#
+#   Important for patching:
+#
+#   (2) This script targets any POSIX shell, so it avoids extensions provided
+#       by Bash, Ksh, etc; in particular arrays are avoided.
+#
+#       The "traditional" practice of packing multiple parameters into a
+#       space-separated string is a well documented source of bugs and security
+#       problems, so this is (mostly) avoided, by progressively accumulating
+#       options in "$@", and eventually passing that to Java.
+#
+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
+#       see the in-line comments for details.
+#
+#       There are tweaks for specific operating systems such as AIX, CygWin,
+#       Darwin, MinGW, and NonStop.
+#
+#   (3) This script is generated from the Groovy template
+#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       within the Gradle project.
+#
+#       You can find Gradle at https://github.com/gradle/gradle/.
+#
+##############################################################################
+
+# Attempt to set APP_HOME
+
+# Resolve links: $0 may be a link
+app_path=$0
+
+# Need this for daisy-chained symlinks.
+while
+    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
+    [ -h "$app_path" ]
+do
+    ls=$( ls -ld "$app_path" )
+    link=${ls#*' -> '}
+    case $link in             #(
+      /*)   app_path=$link ;; #(
+      *)    app_path=$APP_HOME$link ;;
+    esac
+done
+
+APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit
+
+APP_NAME="Gradle"
+APP_BASE_NAME=${0##*/}
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD=maximum
+
+warn () {
+    echo "$*"
+} >&2
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+} >&2
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "$( uname )" in                #(
+  CYGWIN* )         cygwin=true  ;; #(
+  Darwin* )         darwin=true  ;; #(
+  MSYS* | MINGW* )  msys=true    ;; #(
+  NONSTOP* )        nonstop=true ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD=$JAVA_HOME/jre/sh/java
+    else
+        JAVACMD=$JAVA_HOME/bin/java
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD=java
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
+    case $MAX_FD in #(
+      max*)
+        MAX_FD=$( ulimit -H -n ) ||
+            warn "Could not query maximum file descriptor limit"
+    esac
+    case $MAX_FD in  #(
+      '' | soft) :;; #(
+      *)
+        ulimit -n "$MAX_FD" ||
+            warn "Could not set maximum file descriptor limit to $MAX_FD"
+    esac
+fi
+
+# Collect all arguments for the java command, stacking in reverse order:
+#   * args from the command line
+#   * the main class name
+#   * -classpath
+#   * -D...appname settings
+#   * --module-path (only if needed)
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if "$cygwin" || "$msys" ; then
+    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
+    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
+
+    JAVACMD=$( cygpath --unix "$JAVACMD" )
+
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    for arg do
+        if
+            case $arg in                                #(
+              -*)   false ;;                            # don't mess with options #(
+              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
+                    [ -e "$t" ] ;;                      #(
+              *)    false ;;
+            esac
+        then
+            arg=$( cygpath --path --ignore --mixed "$arg" )
+        fi
+        # Roll the args list around exactly as many times as the number of
+        # args, so each arg winds up back in the position where it started, but
+        # possibly modified.
+        #
+        # NB: a `for` loop captures its iteration list before it begins, so
+        # changing the positional parameters here affects neither the number of
+        # iterations, nor the values presented in `arg`.
+        shift                   # remove old arg
+        set -- "$@" "$arg"      # push replacement arg
+    done
+fi
+
+# Collect all arguments for the java command;
+#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
+#     shell script including quotes and variable substitutions, so put them in
+#     double quotes to make sure that they get re-expanded; and
+#   * put everything else in single quotes, so that it's not re-expanded.
+
+set -- \
+        "-Dorg.gradle.appname=$APP_BASE_NAME" \
+        -classpath "$CLASSPATH" \
+        org.gradle.wrapper.GradleWrapperMain \
+        "$@"
+
+# Stop when "xargs" is not available.
+if ! command -v xargs >/dev/null 2>&1
+then
+    die "xargs is not available"
+fi
+
+# Use "xargs" to parse quoted args.
+#
+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
+#
+# In Bash we could simply go:
+#
+#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
+#   set -- "${ARGS[@]}" "$@"
+#
+# but POSIX shell has neither arrays nor command substitution, so instead we
+# post-process each arg (as a line of input to sed) to backslash-escape any
+# character that might be a shell metacharacter, then use eval to reverse
+# that process (while maintaining the separation between arguments), and wrap
+# the whole thing up as a single "set" statement.
+#
+# This will of course break if any of these variables contains a newline or
+# an unmatched quote.
+#
+
+eval "set -- $(
+        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
+        xargs -n1 |
+        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
+        tr '\n' ' '
+    )" '"$@"'
+
+exec "$JAVACMD" "$@"
Index: src/main/java/com/gdsc/beeye/gcs/GCSController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/gdsc/beeye/gcs/GCSController.java b/src/main/java/com/gdsc/beeye/gcs/GCSController.java
new file mode 100644
--- /dev/null	(date 1676888985016)
+++ b/src/main/java/com/gdsc/beeye/gcs/GCSController.java	(date 1676888985016)
@@ -0,0 +1,26 @@
+/*
+package com.gdsc.beeye.gcs;
+
+
+import com.google.cloud.storage.Blob;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+
+@RestController
+@RequiredArgsConstructor
+@RequestMapping("/gcs")
+public class GCSController {
+
+    private final GCSService gcsService;
+
+    @PostMapping("/download")
+    public ResponseEntity localDownloadFromStorage(@RequestBody DownloadReqDto downloadReqDto){
+        Blob fileFromGCS = gcsService.downloadFileFromGCS(downloadReqDto);
+        return ResponseEntity.ok(fileFromGCS.toString());
+    }
+}*/
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
--- /dev/null	(date 1676367530000)
+++ b/settings.gradle	(date 1676367530000)
@@ -0,0 +1,1 @@
+rootProject.name = 'beeye'
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1676367530000)
+++ b/.gitignore	(date 1676367530000)
@@ -0,0 +1,37 @@
+HELP.md
+.gradle
+build/
+!gradle/wrapper/gradle-wrapper.jar
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+
+### VS Code ###
+.vscode/
Index: src/main/java/com/gdsc/beeye/gcs/GCSService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/gdsc/beeye/gcs/GCSService.java b/src/main/java/com/gdsc/beeye/gcs/GCSService.java
new file mode 100644
--- /dev/null	(date 1676888985009)
+++ b/src/main/java/com/gdsc/beeye/gcs/GCSService.java	(date 1676888985009)
@@ -0,0 +1,30 @@
+/*
+package com.gdsc.beeye.gcs;
+
+import com.google.cloud.storage.Acl;
+import com.google.cloud.storage.BlobInfo;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.nio.file.Paths;
+import java.util.ArrayList;
+import java.util.Arrays;
+
+import com.google.cloud.storage.Blob;
+import com.google.cloud.storage.Storage;
+
+@Service
+@RequiredArgsConstructor
+public class GCSService {
+
+    private final Storage storage;
+
+
+    public Blob downloadFileFromGCS(DownloadReqDto downloadReqDto) {
+        Blob blob = storage.get(downloadReqDto.getBucketName(), downloadReqDto.getDownloadFileName());
+        blob.downloadTo(Paths.get(downloadReqDto.getLocalFileLocation()));
+        return blob;
+    }
+}*/
Index: src/main/java/com/gdsc/beeye/QuickstartSample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/gdsc/beeye/QuickstartSample.java b/src/main/java/com/gdsc/beeye/QuickstartSample.java
new file mode 100644
--- /dev/null	(date 1676890936602)
+++ b/src/main/java/com/gdsc/beeye/QuickstartSample.java	(date 1676890936602)
@@ -0,0 +1,29 @@
+package com.gdsc.beeye;// Imports the Google Cloud client library
+import com.google.cloud.translate.Translate;
+import com.google.cloud.translate.Translate.TranslateOption;
+import com.google.cloud.translate.TranslateOptions;
+import com.google.cloud.translate.Translation;
+
+// 번역
+
+public class QuickstartSample {
+    public static void main(String... args) throws Exception {
+        // Instantiates a client
+        Translate translate = TranslateOptions.getDefaultInstance().getService();
+
+        // The text to translate
+        String text = "hola amigo";
+//        String text = "hello, nice to meet you";
+
+        // Translates some text into Korean
+        Translation translation =
+                translate.translate(
+                        text,
+// https://cloud.google.com/java/docs/reference/google-cloud-translate/latest/com.google.cloud.translate
+//                        TranslateOption.sourceLanguage("en"), // can be optional. 안쓰면 자동 detect
+                        TranslateOption.targetLanguage("ko"));
+
+        System.out.printf("Text: %s%n", text);
+        System.out.printf("Translation: %s%n", translation.getTranslatedText());
+    }
+}
\ No newline at end of file
Index: src/main/java/com/gdsc/beeye/TranslateText.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/gdsc/beeye/TranslateText.java b/src/main/java/com/gdsc/beeye/TranslateText.java
new file mode 100644
--- /dev/null	(date 1676879821606)
+++ b/src/main/java/com/gdsc/beeye/TranslateText.java	(date 1676879821606)
@@ -0,0 +1,53 @@
+package com.gdsc.beeye;
+
+// Imports the Google Cloud Translation library.
+import com.google.cloud.translate.v3.LocationName;
+import com.google.cloud.translate.v3.TranslateTextRequest;
+import com.google.cloud.translate.v3.TranslateTextResponse;
+import com.google.cloud.translate.v3.Translation;
+import com.google.cloud.translate.v3.TranslationServiceClient;
+import java.io.IOException;
+
+public class TranslateText {
+
+    // Set and pass variables to overloaded translateText() method for translation.
+    public static void main(String... args) throws Exception {
+        // TODO(developer): Replace these variables before running the sample.
+        String projectId = "involuted-span-377818";
+        // Supported Languages: https://cloud.google.com/translate/docs/languages
+        String targetLanguage = "ko";
+        String text = "your-text";
+        translateText(projectId, targetLanguage, text);
+    }
+
+    // Translate text to target language.
+    public static void translateText(String projectId, String targetLanguage, String text)
+            throws IOException {
+
+        // Initialize client that will be used to send requests. This client only needs to be created
+        // once, and can be reused for multiple requests. After completing all of your requests, call
+        // the "close" method on the client to safely clean up any remaining background resources.
+        try (TranslationServiceClient client = TranslationServiceClient.create()) {
+            // Supported Locations: `global`, [glossary location], or [model location]
+            // Glossaries must be hosted in `us-central1`
+            // Custom Models must use the same location as your model. (us-central1)
+            LocationName parent = LocationName.of(projectId, "global");
+
+            // Supported Mime Types: https://cloud.google.com/translate/docs/supported-formats
+            TranslateTextRequest request =
+                    TranslateTextRequest.newBuilder()
+                            .setParent(parent.toString())
+                            .setMimeType("text/plain")
+                            .setTargetLanguageCode(targetLanguage)
+                            .addContents(text)
+                            .build();
+
+            TranslateTextResponse response = client.translateText(request);
+
+            // Display the translation for each input text provided
+            for (Translation translation : response.getTranslationsList()) {
+                System.out.printf("Translated text: %s\n", translation.getTranslatedText());
+            }
+        }
+    }
+}
\ No newline at end of file
Index: src/main/java/com/gdsc/beeye/VisionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/gdsc/beeye/VisionController.java b/src/main/java/com/gdsc/beeye/VisionController.java
new file mode 100644
--- /dev/null	(date 1676443141495)
+++ b/src/main/java/com/gdsc/beeye/VisionController.java	(date 1676443141495)
@@ -0,0 +1,90 @@
+package com.gdsc.beeye;
+
+/*
+ * Copyright 2019 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import com.google.cloud.vision.v1.AnnotateImageResponse;
+import com.google.cloud.vision.v1.EntityAnnotation;
+import com.google.cloud.vision.v1.Feature.Type;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.stream.Collectors;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.cloud.gcp.vision.CloudVisionTemplate;
+import org.springframework.core.io.ResourceLoader;
+import org.springframework.ui.ModelMap;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.servlet.ModelAndView;
+
+// https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/vision/spring-framework/src/main/java/com/example/vision/VisionController.java
+
+/**
+ * Code sample demonstrating Cloud Vision usage within the context of Spring Framework using Spring
+ * Cloud GCP libraries. The sample is written as a Spring Boot application to demonstrate a
+ * practical application of this usage.
+ */
+@RestController
+public class VisionController {
+
+    @Autowired private ResourceLoader resourceLoader;
+
+    // [START vision_spring_autowire]
+    @Autowired private CloudVisionTemplate cloudVisionTemplate;
+    // [END vision_spring_autowire]
+
+    /**
+     * This method downloads an image from a URL and sends its contents to the Vision API for label
+     * detection.
+     *
+     * @param imageUrl the URL of the image
+     * @param map the model map to use
+     * @return a string with the list of labels and percentage of certainty
+     */
+    @GetMapping("/extractLabels")
+    public ModelAndView extractLabels(String imageUrl, ModelMap map) {
+        // [START vision_spring_image_labelling]
+        AnnotateImageResponse response =
+                this.cloudVisionTemplate.analyzeImage(
+                        this.resourceLoader.getResource(imageUrl), Type.LABEL_DETECTION);
+
+        Map<String, Float> imageLabels =
+                response.getLabelAnnotationsList().stream()
+                        .collect(
+                                Collectors.toMap(
+                                        EntityAnnotation::getDescription,
+                                        EntityAnnotation::getScore,
+                                        (u, v) -> {
+                                            throw new IllegalStateException(String.format("Duplicate key %s", u));
+                                        },
+                                        LinkedHashMap::new));
+        // [END vision_spring_image_labelling]
+
+        map.addAttribute("annotations", imageLabels);
+        map.addAttribute("imageUrl", imageUrl);
+
+        return new ModelAndView("result", map);
+    }
+
+    @GetMapping("/extractText")
+    public String extractText(String imageUrl) {
+        // [START vision_spring_text_extraction]
+        String textFromImage =
+                this.cloudVisionTemplate.extractTextFromImage(this.resourceLoader.getResource(imageUrl));
+        return "Text from image: " + textFromImage;
+        // [END vision_spring_text_extraction]
+    }
+}
\ No newline at end of file
Index: src/main/java/com/gdsc/beeye/DetectText.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/gdsc/beeye/DetectText.java b/src/main/java/com/gdsc/beeye/DetectText.java
new file mode 100644
--- /dev/null	(date 1676881277540)
+++ b/src/main/java/com/gdsc/beeye/DetectText.java	(date 1676881277540)
@@ -0,0 +1,99 @@
+package com.gdsc.beeye;
+
+import com.google.cloud.vision.v1.AnnotateImageRequest;
+import com.google.cloud.vision.v1.AnnotateImageResponse;
+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;
+import com.google.cloud.vision.v1.EntityAnnotation;
+import com.google.cloud.vision.v1.Feature;
+import com.google.cloud.vision.v1.Image;
+import com.google.cloud.vision.v1.ImageAnnotatorClient;
+import com.google.protobuf.ByteString;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+// 이거
+
+public class DetectText {
+
+    // https://cloud.google.com/vision/docs/ocr?hl=ko#vision_text_detection-java
+
+    public static void main(String[] args) throws IOException {
+        // TODO(developer): Replace these variables before running the sample.
+//        String filePath = "C:/Users/blues/Pictures/Screenshots/스크린샷_20230215_122950.png";
+        String filePath = "C:\\Users\\blues\\Desktop\\3-2\\GDSC\\KakaoTalk_20190606_131640200.jpg";
+        System.out.println(detectText(filePath));
+    }
+
+    /*// Detects text in the specified image.
+    public static void detectText(String filePath) throws IOException {
+        List<AnnotateImageRequest> requests = new ArrayList<>();
+
+        ByteString imgBytes = ByteString.readFrom(new FileInputStream(filePath));
+
+        Image img = Image.newBuilder().setContent(imgBytes).build();
+        Feature feat = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();
+        AnnotateImageRequest request =
+                AnnotateImageRequest.newBuilder().addFeatures(feat).setImage(img).build();
+        requests.add(request);
+
+        // Initialize client that will be used to send requests. This client only needs to be created
+        // once, and can be reused for multiple requests. After completing all of your requests, call
+        // the "close" method on the client to safely clean up any remaining background resources.
+        try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {
+            BatchAnnotateImagesResponse response = client.batchAnnotateImages(requests);
+            List<AnnotateImageResponse> responses = response.getResponsesList();
+
+            for (AnnotateImageResponse res : responses) {
+                if (res.hasError()) {
+                    System.out.format("Error: %s%n", res.getError().getMessage());
+                    return;
+                }
+
+                // For full list of available annotations, see http://g.co/cloud/vision/docs
+                for (EntityAnnotation annotation : res.getTextAnnotationsList()) {
+                    System.out.format("Text: %s%n", annotation.getDescription());
+                    break;
+                     // System.out.format("Position : %s%n", annotation.getBoundingPoly());
+                }
+            }
+        }
+    }*/
+
+    // Detects text in the specified image.
+    public static String detectText(String filePath) throws IOException {
+        List<AnnotateImageRequest> requests = new ArrayList<>();
+
+        ByteString imgBytes = ByteString.readFrom(new FileInputStream(filePath));
+
+        Image img = Image.newBuilder().setContent(imgBytes).build();
+        Feature feat = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();
+        AnnotateImageRequest request =
+                AnnotateImageRequest.newBuilder().addFeatures(feat).setImage(img).build();
+        requests.add(request);
+
+        // Initialize client that will be used to send requests. This client only needs to be created
+        // once, and can be reused for multiple requests. After completing all of your requests, call
+        // the "close" method on the client to safely clean up any remaining background resources.
+        try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {
+            BatchAnnotateImagesResponse response = client.batchAnnotateImages(requests);
+            List<AnnotateImageResponse> responses = response.getResponsesList();
+
+            for (AnnotateImageResponse res : responses) {
+                if (res.hasError()) {
+                    System.out.format("Error: %s%n", res.getError().getMessage());
+                    return null;
+                }
+
+                // For full list of available annotations, see http://g.co/cloud/vision/docs
+                for (EntityAnnotation annotation : res.getTextAnnotationsList()) {
+                    // System.out.format("Text: %s%n", annotation.getDescription());
+                    return annotation.getDescription();
+                    // System.out.format("Position : %s%n", annotation.getBoundingPoly());
+                }
+            }
+            return null;
+        }
+    }
+}
\ No newline at end of file
Index: src/main/java/com/gdsc/beeye/DetectTextGcs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/gdsc/beeye/DetectTextGcs.java b/src/main/java/com/gdsc/beeye/DetectTextGcs.java
new file mode 100644
--- /dev/null	(date 1676885538328)
+++ b/src/main/java/com/gdsc/beeye/DetectTextGcs.java	(date 1676885538328)
@@ -0,0 +1,59 @@
+package com.gdsc.beeye;
+
+import com.google.cloud.vision.v1.AnnotateImageRequest;
+import com.google.cloud.vision.v1.AnnotateImageResponse;
+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;
+import com.google.cloud.vision.v1.EntityAnnotation;
+import com.google.cloud.vision.v1.Feature;
+import com.google.cloud.vision.v1.Image;
+import com.google.cloud.vision.v1.ImageAnnotatorClient;
+import com.google.cloud.vision.v1.ImageSource;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+// 원격
+
+public class DetectTextGcs {
+
+    public static void main(String[] args) throws IOException {
+        // TODO(developer): Replace these variables before running the sample.
+//        String filePath = "gs://your-gcs-bucket/path/to/image/file.jpg";
+        String filePath = "gs://beeye-storage/english.jpg";
+        detectTextGcs(filePath);
+    }
+
+    // Detects text in the specified remote image on Google Cloud Storage.
+    public static void detectTextGcs(String gcsPath) throws IOException {
+        List<AnnotateImageRequest> requests = new ArrayList<>();
+
+        ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();
+        Image img = Image.newBuilder().setSource(imgSource).build();
+        Feature feat = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();
+        AnnotateImageRequest request =
+                AnnotateImageRequest.newBuilder().addFeatures(feat).setImage(img).build();
+        requests.add(request);
+
+        // Initialize client that will be used to send requests. This client only needs to be created
+        // once, and can be reused for multiple requests. After completing all of your requests, call
+        // the "close" method on the client to safely clean up any remaining background resources.
+        try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {
+            BatchAnnotateImagesResponse response = client.batchAnnotateImages(requests);
+            List<AnnotateImageResponse> responses = response.getResponsesList();
+
+            for (AnnotateImageResponse res : responses) {
+                if (res.hasError()) {
+                    System.out.format("Error: %s%n", res.getError().getMessage());
+                    return;
+                }
+
+                // For full list of available annotations, see http://g.co/cloud/vision/docs
+                for (EntityAnnotation annotation : res.getTextAnnotationsList()) {
+                    System.out.format("Text: %s%n", annotation.getDescription());
+                    System.out.format("Position : %s%n", annotation.getBoundingPoly());
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
Index: src/main/java/com/gdsc/beeye/BeeyeApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/gdsc/beeye/BeeyeApplication.java b/src/main/java/com/gdsc/beeye/BeeyeApplication.java
new file mode 100644
--- /dev/null	(date 1676367530000)
+++ b/src/main/java/com/gdsc/beeye/BeeyeApplication.java	(date 1676367530000)
@@ -0,0 +1,13 @@
+package com.gdsc.beeye;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+public class BeeyeApplication {
+
+	public static void main(String[] args) {
+		SpringApplication.run(BeeyeApplication.class, args);
+	}
+
+}
Index: src/main/resources/static/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/static/index.html b/src/main/resources/static/index.html
new file mode 100644
--- /dev/null	(date 1676443566189)
+++ b/src/main/resources/static/index.html	(date 1676443566189)
@@ -0,0 +1,34 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title>Google Cloud Vision API with Spring code sample</title>
+</head>
+<body>
+
+<div>
+    <h1>Image Label Annotations</h1>
+    <p>Returns labels classifying the content of the image:</p>
+    <form action="/extractLabels">
+        Web URL of image to analyze:
+        <input type="text"
+               name="imageUrl"
+               value="https://www.google.com/logos/doodles/2018/childrens-day-2018-argentina-peru-5906663952351232-2x.png"/>
+        <input type="submit"/>
+    </form>
+</div>
+
+<div>
+    <h1>Text Extraction</h1>
+    <p>Read and extract the text from the image:</p>
+    <form action="/extractText">
+        Web URL of image to analyze:
+        <input type="text"
+               name="imageUrl"
+               value="https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"/>
+        <input type="submit" />
+    </form>
+</div>
+
+</body>
+</html>
\ No newline at end of file
Index: src/main/resources/templates/result.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/result.html b/src/main/resources/templates/result.html
new file mode 100644
--- /dev/null	(date 1676443552400)
+++ b/src/main/resources/templates/result.html	(date 1676443552400)
@@ -0,0 +1,24 @@
+<!DOCTYPE HTML>
+<html xmlns:th="https://www.thymeleaf.org">
+<head>
+    <title>Google Cloud Vision Results</title>
+    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
+</head>
+<body>
+<h1>Annotations Produced for the Image</h1>
+<table border="1">
+    <tr>
+        <th>Description</th>
+        <th>Score</th>
+    </tr>
+    <tr th:each="entry : ${annotations}">
+        <td>[[${entry.key}]]</td>
+        <td>[[${entry.value}]]</td>
+    </tr>
+</table>
+
+<p>
+    <img th:src="${imageUrl}"/>
+</p>
+</body>
+</html>
\ No newline at end of file
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
new file mode 100644
--- /dev/null	(date 1676886073692)
+++ b/src/main/resources/application.properties	(date 1676886073692)
@@ -0,0 +1,2 @@
+
+spring.cloud.gcp.storage.credentials.location=classpath:involuted-span-377818-befce0f2e2e3.json
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1676367530000)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1676367530000)
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.6-bin.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
new file mode 100644
--- /dev/null	(date 1676889993210)
+++ b/build.gradle	(date 1676889993210)
@@ -0,0 +1,39 @@
+plugins {
+    id 'java'
+    id 'org.springframework.boot' version '2.7.6'
+    id 'io.spring.dependency-management' version '1.1.0'
+}
+
+group = 'com.gdsc'
+version = '0.0.1-SNAPSHOT'
+sourceCompatibility = '11'
+
+configurations {
+    compileOnly {
+        extendsFrom annotationProcessor
+    }
+}
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    implementation 'org.springframework.boot:spring-boot-starter-web'
+    compileOnly 'org.projectlombok:lombok'
+    annotationProcessor 'org.projectlombok:lombok'
+    testImplementation 'org.springframework.boot:spring-boot-starter-test'
+    //implementation group: 'com.google.cloud', name: 'spring-cloud-gcp-starter', version: '2.0.7'
+    implementation 'com.google.cloud:google-cloud-vision:2.0.17'
+    implementation 'org.springframework.cloud:spring-cloud-gcp-starter-vision:1.2.8.RELEASE'
+    implementation platform('com.google.cloud:libraries-bom:26.1.4')
+    implementation 'com.google.cloud:google-cloud-translate'
+    // 이거 넣으면 vision 오류
+//    implementation 'com.google.cloud:google-cloud-storage'
+    implementation 'org.springframework.cloud:spring-cloud-gcp-starter-storage'
+
+}
+
+tasks.named('test') {
+    useJUnitPlatform()
+}
Index: src/main/java/com/gdsc/beeye/service/TestService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/gdsc/beeye/service/TestService.java b/src/main/java/com/gdsc/beeye/service/TestService.java
new file mode 100644
--- /dev/null	(date 1676882379159)
+++ b/src/main/java/com/gdsc/beeye/service/TestService.java	(date 1676882379159)
@@ -0,0 +1,74 @@
+package com.gdsc.beeye.service;
+
+import com.google.cloud.translate.Translate;
+import com.google.cloud.translate.TranslateOptions;
+import com.google.cloud.translate.Translation;
+import com.google.cloud.vision.v1.*;
+import com.google.protobuf.ByteString;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+@RequiredArgsConstructor
+@Service
+public class TestService {
+    
+    // 텍스트 추출
+    public static String detectText(String filePath) throws IOException {
+        List<AnnotateImageRequest> requests = new ArrayList<>();
+
+        ByteString imgBytes = ByteString.readFrom(new FileInputStream(filePath));
+
+        Image img = Image.newBuilder().setContent(imgBytes).build();
+        Feature feat = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();
+        AnnotateImageRequest request =
+                AnnotateImageRequest.newBuilder().addFeatures(feat).setImage(img).build();
+        requests.add(request);
+
+        // Initialize client that will be used to send requests. This client only needs to be created
+        // once, and can be reused for multiple requests. After completing all of your requests, call
+        // the "close" method on the client to safely clean up any remaining background resources.
+        try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {
+            BatchAnnotateImagesResponse response = client.batchAnnotateImages(requests);
+            List<AnnotateImageResponse> responses = response.getResponsesList();
+
+            for (AnnotateImageResponse res : responses) {
+                if (res.hasError()) {
+                    System.out.format("Error: %s%n", res.getError().getMessage());
+                    return null;
+                }
+
+                // For full list of available annotations, see http://g.co/cloud/vision/docs
+                for (EntityAnnotation annotation : res.getTextAnnotationsList()) {
+                    // System.out.format("Text: %s%n", annotation.getDescription());
+                    return annotation.getDescription();
+                    // System.out.format("Position : %s%n", annotation.getBoundingPoly());
+                }
+            }
+            return null;
+        }
+    }
+
+    // 텍스트 번역
+    public static String translateText(String text) throws Exception {
+        // Instantiates a client
+        Translate translate = TranslateOptions.getDefaultInstance().getService();
+
+
+        // Translates some text into Korean
+        Translation translation =
+                translate.translate(
+                        text,
+// https://cloud.google.com/java/docs/reference/google-cloud-translate/latest/com.google.cloud.translate
+//                        TranslateOption.sourceLanguage("en"), // can be optional. 안쓰면 자동 detect
+                        Translate.TranslateOption.targetLanguage("ko"));
+
+        System.out.printf("Text: %s%n", text);
+        System.out.printf("Translation: %s%n", translation.getTranslatedText());
+
+        return translation.getTranslatedText();
+    }
+}
\ No newline at end of file
Index: src/main/java/com/gdsc/beeye/controller/TestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/gdsc/beeye/controller/TestController.java b/src/main/java/com/gdsc/beeye/controller/TestController.java
new file mode 100644
--- /dev/null	(date 1676885460275)
+++ b/src/main/java/com/gdsc/beeye/controller/TestController.java	(date 1676885460275)
@@ -0,0 +1,31 @@
+package com.gdsc.beeye.controller;
+
+import com.gdsc.beeye.service.TestService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.io.IOException;
+
+@RestController
+@RequiredArgsConstructor
+@RequestMapping("/test")
+public class TestController {
+
+    private final TestService testService;
+
+    @GetMapping(value = "/d")
+    public String detectText() throws IOException {
+//        String filePath = "C:\\Users\\blues\\Desktop\\3-2\\GDSC\\korean.jpg";
+        String filePath = "C:\\Users\\blues\\Desktop\\3-2\\GDSC\\english.jpg";
+        return testService.detectText(filePath);
+    }
+
+    @GetMapping(value = "/t")
+    public String translateText() throws Exception {
+        String filePath = "C:\\Users\\blues\\Desktop\\3-2\\GDSC\\korean.jpg";
+//        String filePath = "https://storage.cloud.google.com/beeye-storage/english.jpg";
+        return testService.translateText(testService.detectText(filePath));
+    }
+}
\ No newline at end of file
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
--- /dev/null	(date 1676367530000)
+++ b/gradlew.bat	(date 1676367530000)
@@ -0,0 +1,91 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%"=="" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%"=="" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if %ERRORLEVEL% equ 0 goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if %ERRORLEVEL% equ 0 goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+set EXIT_CODE=%ERRORLEVEL%
+if %EXIT_CODE% equ 0 set EXIT_CODE=1
+if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
+exit /b %EXIT_CODE%
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
new file mode 100644
--- /dev/null	(date 1678100212192)
+++ b/README.md	(date 1678100212192)
@@ -0,0 +1,1 @@
+Test repository of beEye, a service for improving the information acquisition ability of the elderly using GCP Vision API and Translate API.
